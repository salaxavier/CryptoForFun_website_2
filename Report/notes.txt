Organizing our application:
We will be working with a design pattern called MVC. 
Its a neat way of separating parts of our app and grouping them based on their functionality and role. 
M stands for models, this will include all the code for our database models (which in this case will be Products). 
Then comes the V which stands for the views or the layout. We will not cover the views in this tutorial as we are 
designing an API. The remaining part now is the C, which stands for controllers which is the logic of how the app handles the 
incoming requests and outgoing responses. There will be one more thing, called Routes, Routes are our guide, they tell the 
client (browser/mobile app) to go to which Controller once a specific url/path is requested.


Libraries (s'han de referenciar a les referencies)

- Handlebars: The Handlebars library is a template engine (view engine). Handlebars was made so that developers can’t write a lot of 
JavaScript logic inside the templates. This helps to keep templates lean and related strictly to the representation of the data 
(no business logic). It requires full HTML code.
Aims: templates for the html pages, Alert messages, more confortable than Pug as it requires html language
- Mongoose, etc. (check app.js for the rest of libraries)

- Passport
- Flash: to display error messages



routers

app.js:

var routes = require('./routes/index');
var users = require('./routes/users');
app.use('/users', users);  
app.use('/', routes);



Database: login
Collection: users
#show dbs
#db.users.find().pretty()

(messages>post)

Models: represent the DB collections
